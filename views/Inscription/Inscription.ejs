<!DOCTYPE html>

<h1>Création d'un compte entreprise</h1>
<form id="FormInscription" enctype="multipart/form-data" method="post" action="/Company/CreateCompany" class="pure-form pure-form-aligned" >

  <fieldset>
  <h2>Profil Entreprise</h2>
  <p>Ces informations permettront aux étudiants d'avoir plus d'informations sur votre entreprise lorsqu'ils consulteront le catalogue des entreprises sur le site et dans la plaquette du forum.</p>

    <div class="pure-control-group">
      <label for="isPME">Etes-vous une PME?<sup>*</sup> </label>
      <select id="isPME" name="isPME" required>
        <option value="false">Non</option>
        <option value="true">Oui</option>
      </select>
    </div>

    <div class="pure-control-group">
      <label for="siret">Numéro de siret<sup>*</sup> </label>
      <input type="text" name="Siret" id="Siret" placeholder="Siret" required  pattern="[0-9]{3}[ \.\-]?[0-9]{3}[ \.\-]?[0-9]{3}[ \.\-]?[0-9]{5}"/><br>
    </div>

    <div class="pure-control-group">
      <label for="CompanyName">Nom de l'entreprise<sup>*</sup> </label>
      <input type="text" name="CompanyName" id="CompanyName" placeholder="Nom de l'entreprise" required/><br>
    </div>

    <div class="pure-control-group">
      <label for="CompanyGroup">Groupe de l'entreprise </label>
      <input type="text" name="CompanyGroup" id="CompanyGroup" placeholder="Nom du groupe"/><br>
    </div>

    <div class="pure-control-group">
      <label for="CompanyGroup">Logo de l'entreprise</label>
      <input type="file" name="logo" />
    </div>

    <div class="pure-control-group">
      <label for="CompanyDescription">Description de l'entreprise</label>
      <textarea name="CompanyDescription" id="CompanyDescription" placeholder="Tapez ici la description de l'entreprise qui apparaitra dans la plaquette du forum et sur le catalogue en ligne."></textarea><br>
    </div>

    <div class="pure-control-group">
      <label for="CompanyWebsiteUrl">Site internet</label>
      <input type="url" name="CompanyWebsiteUrl" id="CompanyWebsiteUrl" placeholder="URL vers le site de l'entreprise" pattern="(((ht|f)tp(s?))\:\/\/)?(([a-zA-Z0-9]+([@\-\.]?[a-zA-Z0-9]+)<sup>*</sup>)(\:[a-zA-Z0-9\-\.]+)?@)?(www.|ftp.|[a-zA-Z]+.)?[a-zA-Z0-9\-\.]+\.([a-zA-Z]{2,})(\:[0-9]+)"/><br>
    </div>

    <div class="pure-control-group">
      <label for="CompanyCareerUrl">Site de recrutement</label>
      <input type="url" name="CompanyCareerUrl" id="CompanyCareerUrl" placeholder="URL vers le site de recrutement" pattern="(((ht|f)tp(s?))\:\/\/)?(([a-zA-Z0-9]+([@\-\.]?[a-zA-Z0-9]+)<sup>*</sup>)(\:[a-zA-Z0-9\-\.]+)?@)?(www.|ftp.|[a-zA-Z]+.)?[a-zA-Z0-9\-\.]+\.([a-zA-Z]{2,})(\:[0-9]+)"/><br>
    </div>

    <div class="pure-control-group">
      <label for="CompanyAddressRoad">Adresse<sup>*</sup></label>
      <input type="text" name="CompanyAddressRoad" id="CompanyAddressRoad" placeholder="Adresse" required/><br>
    </div>

    <div class="pure-control-group">
      <label for="complementaryInformation">Complément</label>
      <input type="text" name="complementaryInformation" id="complementaryInformation" placeholder="Information complémentaire"/><br>
    </div>

    <div class="pure-control-group">
      <label for="CompanyAddressPostalCode">Code Postal<sup>*</sup></label>
      <input type="text" name="CompanyPostCode" id="CompanyPostCode" placeholder="Code Postal" required pattern="([A-Z]+[A-Z]?\-)?[0-9]{1,2} ?[0-9]{3}"/><br>
    </div>

    <div class="pure-control-group">
      <label for="CompanyAddressCity">Ville<sup>*</sup></label>
      <input type="text" name="CompanyAddressCity" id="CompanyAddressCity" placeholder="Ville" required/><br>
    </div>

    <div class="pure-control-group">
      <label for="CompanyAddressCountry">Pays<sup>*</sup></label>
      <input type="text" name="CompanyAddressCountry" id="CompanyAddressCountry" placeholder="Pays" required/><br>
    </div>

  <h2>Contact Forum</h2>
  <p>Ces informations doivent être remplies par la personne qui sera en charge du dossier. Elles seront utilisées par l'équipe du forum pour contacter l'entreprise.</p>

  <div class="pure-control-group">
    <label for="UserFirstName">Prénom<sup>*</sup></label>
    <input type="text" name="UserFirstName" id="UserFirstName" placeholder="Prénom" required/>
  </div>

  <p style="color:red;display:none" id="UserFirstNameErr" >Ce champ doit être complété et contenir moins de 20 caractères</p><br>

  <div class="pure-control-group">
    <label for="UserLastName">Nom<sup>*</sup></label>
    <input type="text" name="UserLastName" id="UserLastName" placeholder="Nom" required/><br>
  </div>

  <div class="pure-control-group">
    <label for="Position">Fonction<sup>*</sup></label>
    <input type="text" name="Position" id="Position" placeholder="Fonction" required/><br  >
  </div>

  <div class="pure-control-group">
    <label for="phoneNumber">Numéro de téléphone<sup>*</sup></label>
    <input type="tel" name="PhoneNumber" id="PhoneNumber" placeholder="Numéro de téléphone" required pattern="^((\+\d{1,3}(-| )?\(?\d\)?(-| )?\d{1,5})|(\(?\d{2,6}\)?))(-| )?(\d{3,4})(-| )?(\d{4})(( x| ext)\d{1,5}){0,1}$"/><br>
  </div>

  <div class="pure-control-group">
    <label for="UserMail">Addresse e-mail<sup>*</sup></label>
    <input type="email" name="UserEmail" id="UserEmail" placeholder="Email" required pattern="^\S+@(([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6})$"/><br>
  </div>

  <div class="pure-control-group">
    <label for="UserPassword">Mot de passe<sup>*</sup></label>
    <input type="password"  id="UserPassword" placeholder="Password" required/><br>
  </div>

  <div class="pure-control-group">
    <label for="ConfirmUserPassword">Confirmez le mot de passe<sup>*</sup></label>
    <input type="password" id="ConfirmUserPassword" placeholder="Confirm Password" required/><br>
    <p for="ConfirmUserPassword" id="UserPasswordErr" style="display:none;">Les mots de passe doivent être identiques</p>
  </div>

  <!--Champ caché contenant le mot de passe haché qui sera envoyé via POST-->
  <input type="hidden" id="POSTUserPass" name="UserPassword">


    <!--
      <h2>Contact Facturation</h2>

        <label for="BUserFirstName">Prénom : </label>
        <input type="text" name="BUserFirstName" id="BUserFirstName" placeholder="Prénom" required/>
        <p style="color:red;display:none" id="UserFirstNameErr" >Ce champ doit être complété et contenir moins de 20 caractères</p><br>

        <label for="BUserLastName">Nom : </label>
        <input type="text" name="BUserLastName" id="BUserLastName" placeholder="Nom" required/><br>

        <label for="BPosition">Fonction : </label>
        <input type="text" name="BPosition" id="BPosition" placeholder="Fonction" required/><br  >

        <label for="BPhoneNumber">Numéro de téléphone : </label>
        <input type="text" name="BPhoneNumber" id="BPhoneNumber" placeholder="Numérode téléphone" required/><br>

        <label for="BUserMail">Addresse e-mail : </label>
        <input type="email" name="BUserEmail" id="BUserEmail" placeholder="Email" required/><br>
    -->

  <div class="pure-controls">
    <input id="ButtonSubmit" type="submit" class="pure-button pure-button-primary" value="Valider">
  </div>


  </fieldset>
</form>
<p><sup>*</sup> Champs obligatoires</p>



<script type="text/javascript">
  <!--


  // Objets de saisie
  var UserPassword = document.getElementById("UserPassword");
  var ConfirmUserPassword = document.getElementById("ConfirmUserPassword");
  var POSTUserPass = document.getElementById("POSTUserPass");
  var ButtonSubmit = document.getElementById("ButtonSubmit");
  var FormInscription = document.getElementById("FormInscription");

  //Objets de notifications erreurs
  var UserPasswordErr = document.getElementById("UserPasswordErr");

  // Fonctions utilisées pour verifier les erreurs

  //Affiche erreur sur un champ
  // ErrObj corespond a l'objet qui contient le message d'erreur (dont le css sera modifié par JS pour qu'il soit affiché)
  function DispError(ErrObj){
    ErrObj.style="display:block;font-size: small; color:red;";
  }

  // Supprime erreur sur un champ
  // ErrObj corespond a l'objet qui contient le message d'erreur (dont le css sera modifié par JS pour qu'il soit affiché)
  function CleanError(ErrObj){
    ErrObj.style="display:none;";
  }

  // Vérifie que les mots de passes Pass1 et Pass2 soient identiques
  function PassCheck(Pass1,Pass2){
    if(Pass1.value==Pass2.value)
      return true;
  }

  // Verification du mot de passe
  ConfirmUserPassword.addEventListener('input',function(){
    if(PassCheck(UserPassword,ConfirmUserPassword)){
      UserPassword.style="background-color:#66ff66;";
      ConfirmUserPassword.style="background-color:#66ff66;";
      CleanError(UserPasswordErr);
      POSTUserPass.value=sha1(UserPassword.value);
      ButtonSubmit.href="javascript: submitform()";
      ButtonSubmit.disabled=false;
    }
    else
    {
      UserPassword.style="background-color:#ff6666;";
      ConfirmUserPassword.style="background-color:#ff6666;";
      DispError(UserPasswordErr);
      POSTUserPass.value=undefined;
      ButtonSubmit.href="#UserPassword";
      ButtonSubmit.disabled=true;
    }
  })

  UserPassword.addEventListener('input',function(){
    if(PassCheck(UserPassword,ConfirmUserPassword)){
      UserPassword.style="background-color:#66ff66;";
      ConfirmUserPassword.style="background-color:#66ff66;";
      CleanError(UserPasswordErr);
      POSTUserPass.value=sha1(UserPassword.value);
      ButtonSubmit.disabled=false;
    }
    else
    {
      UserPassword.style="background-color:#ff6666;";
      ConfirmUserPassword.style="background-color:#ff6666;";
      DispError(UserPasswordErr);
      POSTUserPass.value=undefined;
      ButtonSubmit.href="#UserPassword";
      ButtonSubmit.disabled=true;
    }
  })

  // FOnction qui permet de soumettre le form une fois la verif mot de passe OK
  function submitform()
  {
    FormInscription.submit();
  }

  // Fonction qui permet de faire un hashage en sha1, prise sur le web
  function sha1 (str) {
    //  discuss at: http://phpjs.org/functions/sha1/
    // original by: Webtoolkit.info (http://www.webtoolkit.info/)
    // improved by: Michael White (http://getsprink.com)
    // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    //    input by: Brett Zamir (http://brett-zamir.me)

    var rotate_left = function (n, s) {
      var t4 = (n << s) | (n >>> (32 - s))
      return t4
    }

    /* var lsb_hex = function (val) {
     // Not in use; needed?
     var str="";
     var i;
     var vh;
     var vl;

     for ( i=0; i<=6; i+=2 ) {
     vh = (val>>>(i*4+4))&0x0f;
     vl = (val>>>(i*4))&0x0f;
     str += vh.toString(16) + vl.toString(16);
     }
     return str;
     };*/

    var cvt_hex = function (val) {
      var str = ''
      var i
      var v

      for (i = 7; i >= 0; i--) {
        v = (val >>> (i * 4)) & 0x0f
        str += v.toString(16)
      }
      return str
    }

    var blockstart
    var i, j
    var W = new Array(80)
    var H0 = 0x67452301
    var H1 = 0xEFCDAB89
    var H2 = 0x98BADCFE
    var H3 = 0x10325476
    var H4 = 0xC3D2E1F0
    var A, B, C, D, E
    var temp

    // utf8_encode
    str = unescape(encodeURIComponent(str))
    var str_len = str.length

    var word_array = []
    for (i = 0; i < str_len - 3; i += 4) {
      j = str.charCodeAt(i) << 24 | str.charCodeAt(i + 1) << 16 | str.charCodeAt(i + 2) << 8 | str.charCodeAt(i + 3)
      word_array.push(j)
    }

    switch (str_len % 4) {
      case 0:
        i = 0x080000000
        break
      case 1:
        i = str.charCodeAt(str_len - 1) << 24 | 0x0800000
        break
      case 2:
        i = str.charCodeAt(str_len - 2) << 24 | str.charCodeAt(str_len - 1) << 16 | 0x08000
        break
      case 3:
        i = str.charCodeAt(str_len - 3) << 24 | str.charCodeAt(str_len - 2) << 16 | str.charCodeAt(str_len - 1) <<
          8 | 0x80
        break
    }

    word_array.push(i)

    while ((word_array.length % 16) != 14) {
      word_array.push(0)
    }

    word_array.push(str_len >>> 29)
    word_array.push((str_len << 3) & 0x0ffffffff)

    for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {
      for (i = 0; i < 16; i++) {
        W[i] = word_array[blockstart + i]
      }
      for (i = 16; i <= 79; i++) {
        W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1)
      }

      A = H0
      B = H1
      C = H2
      D = H3
      E = H4

      for (i = 0; i <= 19; i++) {
        temp = (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff
        E = D
        D = C
        C = rotate_left(B, 30)
        B = A
        A = temp
      }

      for (i = 20; i <= 39; i++) {
        temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff
        E = D
        D = C
        C = rotate_left(B, 30)
        B = A
        A = temp
      }

      for (i = 40; i <= 59; i++) {
        temp = (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff
        E = D
        D = C
        C = rotate_left(B, 30)
        B = A
        A = temp
      }

      for (i = 60; i <= 79; i++) {
        temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff
        E = D
        D = C
        C = rotate_left(B, 30)
        B = A
        A = temp
      }

      H0 = (H0 + A) & 0x0ffffffff
      H1 = (H1 + B) & 0x0ffffffff
      H2 = (H2 + C) & 0x0ffffffff
      H3 = (H3 + D) & 0x0ffffffff
      H4 = (H4 + E) & 0x0ffffffff
    }

    temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4)
    return temp.toLowerCase()
  }
  //-->
</script>
